/*Clean SVG Manually*/
/*Notice how the purple writing is staring at you in the face? 
Well, this can go. This SVG was created using Inkscape so you can go right ahead an delete that comment as well.
============================================
Right, now we're going to get stuck into the code itself.

Web browsers need an xmlns declaration so that they know what type of code they're dealing with. So feel free to recycle the redundant code generated by Inkscape back into binary consciousness.
I've commented in the HTML code which parts can go.
=============================================
Adobe & Inkscape create a lot of jargon during output.
You require 2 xmlns definitions for the browsers, but stuff like <metadata> and individual id's for the various svg elements can be cleared or reused.

In this case, I only wanted a single color throughout the graphic so I created:

fill="none" stroke="#59D2ED" 
for use in the first <g> and kept the individual <stroke-width=""> for each part of the vector.

Inline styling elements were originally defined as style="". I've left the very last <path> untouched so that you can see how convoluted the syntax is. Deleting all of these style  properties in the last <path> will not affect the graphic. Go on- delete them.

Inkscape and Adobe Illustrator create paths according to the layers and node inputs. By being concise in your Design, you can create svg's with crisp and clean code in the output.
You are able to define id's <g> and <path> within these editors while you're designing, which will cut down on time spent coding.

Note that the <defs> tag is redundant in this case as I am rendering the svg as is onto the web page. If I wanted to reuse any part of this graphic I would leave the <defs> element in with an appropriate id="####" as <use> it elsewhere on the page.

The following code
<use xlink:href="#(id="#####") x="" y="">

calls the SVG (by id="####") and places it at the x,y co-ordinates provided.
=================================
*/

/*
=================================
Small Bonus:
Animating the graphic.
In this instance we've animated the whole energy vortice so that it rotates on it's own axis.
1st: We find the Core Center, which in this case is acquired through extrapolation (a really fancy word which describes how I fucked around with the code until I got the desired coords via trial & error)

2nd: 
I wanted to animate the whole thing for the sake of brevity so I added ->

<animateTransform
attributeName="transform"
attributeType="XML"
type="rotate"
values="0 199 848;-180 199 848; 90 199 848; -360 199 848; 270 199 848"
begin="0s"
dur="24s"                 
repeatCount="indefinite"
/>

to the whole group of paths.

In the manner I've animated the graphic, 'dur' -for duration - dictates the speed at which the animation occurs. 

repeatCount="indefinite" allows the animation to go on forever.

I've used "values" from the W3C Spec Sheet for SVG animation properties. The order for these is : degree of rotation, x-xoordinate, y-coordinate [in this instance].


=================================
*/